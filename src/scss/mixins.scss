@use "sass:math";

$rem-base: 15px !default;

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return math.div($num, $num * 0 + 1);
}

@function convert-to-em($value, $base-value: $rem-base) {
  $value: math.div(strip-unit($value), strip-unit($base-value)) * 1em;
  @if ($value == 0em) {
    $value: 0;
  }
  // Turn 0em into 0
  @return $value;
}

@function convert-to-rem($value, $base-value: $rem-base) {
  $value: math.div(strip-unit($value), strip-unit($base-value)) * 1rem;
  @if ($value == 0rem) {
    $value: 0;
  }
  // Turn 0rem into 0
  @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);
  @if $max == 1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }
  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

// flexbox

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin inline-flexbox() {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

@mixin flex-flow($values) {
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

@mixin align-items($val) {
  $IEval: $val;
  @if $val == flex-start {
    $IEval: start;
  } @else if $val == flex-end {
    $IEval: end;
  }
  -webkit-flex-align: $val;
  -ms-flex-align: $IEval;
  -webkit-align-items: $val;
  align-items: $val;
}

@mixin align-self($val) {
  $IEval: $val;
  @if $val == flex-start {
    $IEval: start;
  } @else if $val == flex-end {
    $IEval: end;
  }
  -webkit-align-self: $val;
  -ms-flex-item-align: $IEval;
  -webkit-align-item-align: $val;
  align-self: $val;
}

@mixin justify-content($val) {
  $IEval: $val;
  @if $val == space-between {
    $IEval: justify;
  } @else if $val == space-around {
    $IEval: distribute;
  } @else if $val == flex-start {
    $IEval: start;
  } @else if $val == flex-end {
    $IEval: end;
  }
  -webkit-justify-content: $val;
  -ms-flex-pack: $IEval;
  justify-content: $val;
}

@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range, 1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

@function em-calc($values, $base-value: $rem-base) {
  $max: length($values);
  @if $max == 1 {
    @return convert-to-em(nth($values, 1), $base-value);
  }
  $emValues: ();
  @for $i from 1 through $max {
    $emValues: append($remValues, convert-to-em(nth($values, $i), $base-value));
  }
  @return $emValues;
}

@mixin toggl-button {
  @include flexbox();
  @include justify-content(center);
  @include align-items(center);
  @include button-large();
  background-color: rgba(0, 0, 0, 0.09);
  width: rem-calc(300);
  height: rem-calc(150);

  &:hover {
    background-color: rgb(147 8 8 / 25%);
}
}

@mixin btnAnimations($name, $anchor, $edge) {
  $anchor-op: "left";

  @if $anchor == "left" {
    $anchor-op: "right";
  }
  @else if $anchor == 'top' {
    $anchor-op: "bottom";
  }
  @else if $anchor == 'bottom' {
    $anchor-op: "top";
  }

  @keyframes #{$name} {
    0% {
      #{$anchor-op}: auto;
      #{$anchor}: 0;
      #{$edge}: 0%;
    }
    12.5% {
      #{$anchor-op}: auto;
      #{$anchor}: 0;
      #{$edge}: 100%;
    }
    12.6% {
      #{$anchor-op}: 0;
      #{$anchor}: auto;
    }
    50% {
      #{$edge}: 100%;
    }
    62.5% {
      #{$edge}: 0%;
    }
    100% {
      #{$anchor-op}: 0;
      #{$anchor}: auto;
      #{$edge}: 0%;
    }
  }
}
